Name: Joseph Picchi

Assignment 5

==========
Lab 5 Log
==========

1. wget https://web.cs.ucla.edu/classes/spring20/cs35L/assign/
   	coreutils-with-bug.tar.gz
					--> downloads the old, stable version
					    of coreutils from the spec that
					    has 2 bugs


2. Try to build the old version of coreutils as-is:

   tar -xvf coreutils-with-bug.tar.gz
				--> decompresses the coreutils tarball.
				    "-x" means we are extracting the files
				    "-v" specifies that we want verbose output
				    "-f" means that we are specifying a
				    file to be decompressed

   mkdir buggy_coreutils
   cd buggy_coreutils
   pwd
				--> creates a directory in which we can
				    install coreutils, and prints the
				    absolute path of that new directory
				    so that we can use it in the next
				    command

   cd ../coreutils-with-bug/
   ./configure --prefix=/u/be/ugrad/picchi/Desktop/35L/ass5/lab/buggy_coreutils
				--> checks to make sure the system meets
				    all installation requirements, and
				    configures the installation options.
				    "==prefix=..." specifies that the files
				    should be installed in the given directory,
				    as opposed to the default of  "/usr/local"

   make				--> attempts to compile the files, but fails

   output of "make" command above:

	In file included from utimecmp.c:41:
	utimens.h:2:5: error: conflicting types for 'futimens'
	   2 | int futimens (int, char const *, struct timespec const [2]);
	     |     ^~~~~~~~
	In file included from utimecmp.h:25,
	   		 from utimecmp.c:25:
	/usr/include/sys/stat.h:373:12: note: previous declaration of
	'futimens' was here
	   373 | extern int futimens (int __fd, const struct timespec __times[2]) __THROW;
	       |            ^~~~~~~~

   (NOTE: the answer the to the question "what problems did you have when building it
   as-is" is give in step 4)



3. Apply the patch, and try to build again.

   wget https://web.cs.ucla.edu/classes/spring20/cs35L/assign/coreutils.diff
						--> downloads the renaming patch
						    from the link given in the
						    assignment 5 spec

   mv coreutils.diff coreutils-with-bug		--> moves the patch file to the
      		     				    directory with the coreutils
						    files

   patch -p0 < coreutils.diff			--> applies the patch file.
   	       					    "-p0" means that we wish to
						    keep the entire file name and path
						    from the patch unmodified

   ./configure --prefix=/u/be/ugrad/picchi/Desktop/35L/ass5/lab/buggy_coreutils
						--> performs the same operations as
						    described in step 2

   make						--> compiles the coreutils files and
   						    creates executables

   make install					--> installs the executables and other
   						    files in the directory speficied
						    in the "./configure" step


4. What problems did you have when building it as-is, and why did the renaming patch
   fix them?

   --> PROBLEM WITH BUILDING AS-IS:
   
   When attempting the compile the files as-is, I recieved the following error
   messages after running the command "make":
   
	In file included from utimecmp.c:41:
	utimens.h:2:5: error: conflicting types for 'futimens'
	   2 | int futimens (int, char const *, struct timespec const [2]);
	     |     ^~~~~~~~
	In file included from utimecmp.h:25,
	   		 from utimecmp.c:25:
	/usr/include/sys/stat.h:373:12: note: previous declaration of
	'futimens' was here
	   373 | extern int futimens (int __fd, const struct timespec __times[2]) __THROW;
	       |            ^~~~~~~~

   These errors indicate that the files failed to compile as-is because there exist
   two different versions of the function "futimes", each of which use different
   parameters. Thus, if we compile as-is, we attempt to redefine the function
   "futimes" with different parameters, thus causing errors and a build failure.

   --> HOW THE RENAMING PATCH FIXES THIS:
   
   The renaming patch fixes this issue by changing the name of one of the "futimens"
   functions from
   	     "futimens (int, char const *, struct timespec const [2])"
   to
	     "coreutils_futimens (int, char const *, struct timespec const [2])"
   in all files in which that particular version of the function exists.

   It appears that a similar issue issue may exist with multiple versions of the
   function "tee", since the diff file also changes the name of function
            "tee (int nfiles, const char **files)"
   to
	    "coreutils_tee (int nfiles, const char **files)"

   Thus, when we rebuild, the changes from the diff file ensure that there are no
   conflicting function declarations or invokations that may causes errors.


5. Reproduce the bug:

   tmp=$(mktemp -d)
   cd $tmp
   touch -d '1918-11-11 11:00 GMT' wwi-armistice-cs35L
   touch now
   sleep 1
   touch now1
   TZ=UTC0 ~/Desktop/35L/ass5/lab/buggy_coreutils/bin/ls -lt --full-time wwi-armistice-cs35L now now1

   output:

	-rw-r--r-- 1 picchi beugrad 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice-cs35L
	-rw-r--r-- 1 picchi beugrad 0 2020-05-07 02:36:01.464726296 +0000 now1
	-rw-r--r-- 1 picchi beugrad 0 2020-05-07 02:35:43.625112280 +0000 now

   The bug has been reproduced because "ls" in the old version of coreutils that I
   installed mishandles files whose time stamps are very far in the past by
   acting as though they are in the future. This is indicated by the fact that the
   output of the above commands lists "wwi-armistice-cs35L" before "now1" and "now"
   (thus treating "wwi-armistice-cs35L" as the most recent file), even though the
   date of "wwi-armistice-cs35L" is far in the past compared to those of "now1" and
   "now".


6. Use gdb to find the source of the bug.

   emacs coreutils-with-bug/src/ls.c		--> view the source code for the "ls"
   	 					    command in old coreutils.

   C-s t i m e				       --> search the source code for functions
       	     				       	   with "time" in their names

  NOTE: from this anaylsis, we find that the functions with "time" in their names
  include
	"cmp_mtime"
	"cmp_atime"
	"cmp_ctime"
	"long_time_expected_width"	--> unlikely to be the source of the bug
	"get_current_time"		--> unlikely to be the source of the bug
	
   gdb buggy_coreutils/bin/ls 			--> run gdb on the the "ls" executable
       						    that contains the timestamp bug

   b cmp_mtime					--> set a breakpoint at the first
     						    instruction of the function
						    "cmp_mtime"

   b cmp_ctime					--> set a breakpoint at the first
     						    instruction of the function
						    "comp_ctime"

   r /tmp/tmp.XLWGQZuDuh -lt --full-time wwi-armistice-cs35L now now1
     			     		 	--> run "ls -lt --full-time" on the
						    temporary directory and files
						    that were used to detect the
						    timestamp bug in the first place

   NOTE: the program breaks on the first line of "cmp_mtime"

   list 2880 	     	       	   	      --> list 10 lines around line 2880
   					      	  (the first line of "cmp_mtime)

   NOTE: from the last command, we find that "cmp m_time" is implemented as:
   	      int diff = timespec_cmp (get_stat_mtime (&b->stat),
	      	       	 	       get_stat_mtime (&a->stat));
	      return diff ? diff : cmp (a->name, b->name);

	 It seems likely that the line "int diff = ..." is the culprit of the bug,
	 since this this the manner in whcih "cmp_mtime" compares the timestamps of
	 files.

   si						--> step into the "timespec_cmp"
   						    function

   list 49					--> lists 10 instructions around line
   						    49, thus showing the contents of
						    "timespec_cmp"

   NOTE: the "list 49" command produces the following output:

   	45	static inline int
	46	timespec_cmp (struct timespec a, struct timespec b)
	47	{
	48	  int diff = a.tv_sec - b.tv_sec;
	49	  return diff ? diff : a.tv_nsec - b.tv_nsec;
	50	}

   This seems to be the source of the issue, since there is no guard to prevent
   overflow in the case that the time difference between files (ie the value of "diff")
   is extremeley large. When the time difference is extremely large, such as in our
   test case, the difference in seconds (as indicated by "a.tv_sec - b.tv_sec") is so
   large in magnitude that "diff" overflows.
   GDB indicates that this function is in the file "../lib/timespec.h", so this is the
   file we need to modify.


7. Fix the source file after finding the bug

   cd coreutils-with-bug/
   cp lib/timespec.h new_timespec.h          --> create a copy of "timespec.h", since
      		     			     	 this is the file we want to modify

   emacs new_timespec.h		 	     --> open the copy file for editing

   alterations to new_timespec.h
	--> removed:

		int diff = a.tv_sec - b.tv_sec;
		return diff ? diff : a.tv_nsec - b.tv_nsec;

	--> added:

		if (a.tv_sec < b.tv_sec) {
		   return -1;
		}
		else if (a.tv_sec > b.tv_sec) {
		   return 1;
		}
		else {
		   return a.tv_nsec - b.tv_nsec;
		}
	 
   diff -u lib/timespec.h timespec.h >lab5.diff
						--> generate a diff file with the
						    changes

   emacs lab5.diff
   (changed "new_timespec.h" to "lib/timespec.h" so the patch can be applied correctly
   to "lib/timespec.h")

   make						--> recompile the files

   make install					--> move the compiled executables to the
   						    proper directory



8. test if "ls" works after applying the patch:

   cd $tmp
   TZ=UTC0 ~/Desktop/35L/ass5/lab/buggy_coreutils/bin/ls -lt --full-time wwi-armistice-cs35L now now1

   OUTPUT:
	-rw-r--r-- 1 picchi beugrad 0 2020-05-07 06:41:50.913238277 +0000 now1
	-rw-r--r-- 1 picchi beugrad 0 2020-05-07 06:41:49.908203630 +0000 now
	-rw-r--r-- 1 picchi beugrad 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice-cs35L

   This output indicates that the patch now works because files that have timestamps
   far in the past are listed in their proper positions.


9. try to reproduce the problem in the home directory, instead of using the $tmp
   directory:

   cd ~
   touch -d '1918-11-11 11:00 GMT' wwi-armistice-cs35L
   touch now
   sleep 1
   touch now1
   TZ=UTC0 ls -lt --full-time wwi-armistice-cs35L now now1
   	      	  	      			      --> run the tests in the home
						      	  directory, using the already-
							  installed "touch" and "ls"
							  utilities

   OUTPUT:
	-rw-r--r-- 1 picchi beugrad 0 2054-12-17 17:28:16.000000000 +0000 wwi-armistice-cs35L
	-rw-r--r-- 1 picchi beugrad 0 2020-05-07 08:16:44.130766000 +0000 now1
	-rw-r--r-- 1 picchi beugrad 0 2020-05-07 08:16:35.752214000 +0000 now

   --> How well does SEASnet do?

       	   SEASnet produces the incorrect order of files (ie "wwi-armistice-cs35L" is
	   listed as the most recent file, even though it should not be). However, in
	   contrast to the old version of couretils, SEASnet not only acts as though
	   "wwi-armistic-cs35L" is most recent, but it also assigns it a timestamp
	   far in the future (a date in "2054"), thus indicating that the bug likely
	   lies in the implementation SEASnet's "touch" utility.
