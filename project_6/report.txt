Name: Joseph Picchi

CS35L Assignment 6

===========
REPORT.TXT
===========

------------------------------
START OF MY COPY OF "LAB.TXT"
------------------------------

1. Lab Questions 1 & 2:

   Write the tr2b.c program using "getchar" and "putchar".
   Write the tr2u.c program using "read" and "write".

   compile them with the commands:

           gcc tr2b.c -std=c99 -o tr2b
           gcc tr2u.c -std=c99 -o tr2u


2. Write a python script that outputs a random string of at least
   5,000,000 bytes (ie chars):

   The script that I created generates a string of random alphanumeric
   characters and punctuation symbols. This is my script:

   #START OF SCRIPT

   import random
   import string

   if __name__=="__main__":

      char_options = string.ascii_letters + string.punctuation + string.digits
      return_string = '';

      for i in range(5000000):
          return_string += random.choice(char_options)

      print(return_string)

   #END OF SCRIPT


3. Generate a file of at least 5,000,000 bytes:

   python3 largeFileGenerator.py >largeFile.txt
                                 --> the random string generated by the Python
                                     script is placed in "largeFile.txt"


4. Lab Question 3: Use "strace" to compare system calls issued by tr2b and
   tr2u when (a) copying one file to another, and (b) when copying a file
   to your terminal.

   (a) when copying one file to another:

       strace -c -o strace_b ./tr2b "abc" "def" <largeFile.txt >output_b.txt
                                          --> counts the time, calls, and
                                              errors for each system call
                                              and stores a summary in
                                              "strace_b"
                                          --> "largeFile.txt" gets copied to
                                              "output_b.txt"

       "strace_b" contains the output:

            % time     seconds  usecs/call     calls    errors syscall
            ------ ----------- ----------- --------- --------- ----------------
             61.10    0.000870           1       611           write
             38.90    0.000554           1       613           read
              0.00    0.000000           0         2           open
              0.00    0.000000           0         2           close
              0.00    0.000000           0         4           fstat
              0.00    0.000000           0         9           mmap
              0.00    0.000000           0         4           mprotect
              0.00    0.000000           0         1           munmap
              0.00    0.000000           0         1           brk
              0.00    0.000000           0         1         1 access
              0.00    0.000000           0         1           execve
              0.00    0.000000           0         1           arch_prctl
            ------ ----------- ----------- --------- --------- ----------------
            100.00    0.001424                  1250         1 total



       strace -c -o strace_u ./tr2u "abc" "def" <largeFile.txt >output_u.txt
                                                --> counts the time, calls, and
                                                    errors for each system call
                                                    and stores a summary in
                                                    "strace_u"
                                                --> "largeFile.txt" gets copied
                                                    to "output_u.txt"

       "strace_u" contains the ouput:

            % time     seconds  usecs/call     calls    errors syscall
            ------ ----------- ----------- --------- --------- ----------------
             54.67   27.532733           6   5000001           write
             45.33   22.831417           5   5000003           read
              0.00    0.000064          32         2           open
              0.00    0.000054          54         1         1 access
              0.00    0.000049           7         7           mmap
              0.00    0.000049          49         1           execve
              0.00    0.000043          43         1           brk
              0.00    0.000022           6         4           mprotect
              0.00    0.000010          10         1           munmap
              0.00    0.000009           5         2           fstat
              0.00    0.000006           3         2           close
              0.00    0.000003           3         1           arch_prctl
            ------ ----------- ----------- --------- --------- ----------------
            100.00   50.364459              10000026         1 total

       Analysis:
           By comparing the contents of "strace_b" and "strace_u", we
           can see that tr2u issues significantly more system calls compared
           to tr2b, where tr2u has a total of 10,000,026 system calls compared
           to tr2b's total of 1,250.
           The reason for this drastic difference is that tr2b collects data
           into buffers and uses one system call to read/write multiple data
           elements at a time, whereas tr2u uses no buffers and instead
           issues a system call every time it reads/writes a data element.

   (B) when copying a file to your terminal:

       strace -c -o strace_bt ./tr2b "abc" "def" <largeFile.txt
                                          --> counts the time, calls, and
                                              errors for each system call
                                              and stores a summary in
                                              "strace_bt"
                                          --> "largeFile.txt" gets copied to
                                              the terminal

       contents of "strace_bt":

            % time     seconds  usecs/call     calls    errors syscall
            ------ ----------- ----------- --------- --------- ----------------
             91.10    0.010676           2      4883           write
              6.96    0.000816           1       613           read
              0.67    0.000079          79         1           execve
              0.39    0.000046           5         9           mmap
              0.30    0.000035           9         4           mprotect
              0.15    0.000018           5         4           fstat
              0.13    0.000015           8         2           open
              0.09    0.000011          11         1           munmap
              0.06    0.000007           4         2           close
              0.06    0.000007           7         1         1 access
              0.05    0.000006           6         1           brk
              0.03    0.000003           3         1           arch_prctl
            ------ ----------- ----------- --------- --------- ----------------
            100.00    0.011719                  5522         1 total

       strace -c -o strace_ut ./tr2u "abc" "def" <largeFile.txt
                                          --> counts the time, calls, and
                                              errors for each system call
                                              and stores a summary in
                                              "strace_ut"
                                          --> "largeFile.txt" gets copied to
                                              the terminal

       contents of "strace_ut":

            % time     seconds  usecs/call     calls    errors syscall
            ------ ----------- ----------- --------- --------- ----------------
             54.86   26.165077           5   5000001           write
             45.13   21.524925           4   5000003           read
              0.00    0.000048          48         1           brk
              0.00    0.000042           6         7           mmap
              0.00    0.000027          27         1           execve
              0.00    0.000014           7         2           open
              0.00    0.000011           3         4           mprotect
              0.00    0.000010          10         1         1 access
              0.00    0.000006           3         2           close
              0.00    0.000006           3         2           fstat
              0.00    0.000002           2         1           arch_prctl
              0.00    0.000000           0         1           munmap
            ------ ----------- ----------- --------- --------- ----------------
            100.00   47.690168              10000026         1 total

       Analysis:
           By comparing the contents of "strace_bt" and "strace_ut", just
           as in case (A), tr2u invokes significantly more system calls than
           tr2b, with a tr2u total of 10,000,026 compared to a tr2b total
           of 5,522.
           The reason for this difference is the same as that given in part (A).


5. Lab Question 4: Use the time command to measure how much faster one program
   is, compared to the other, when copying the same amount of data:

   (A) when copying one file to another:

       time ./tr2b "abc" "def" <largeFile.txt >output
                                              --> measures the real time, CPU
                                                  time, and system time
                                                  elapsed during the command's
                                                  execution.

       otput:
                real    0m0.306s
                user    0m0.226s
                sys     0m0.009s

       time ./tr2u "abc" "def" <largeFile.txt >output
                                              --> same effect as last "time"
                                                  command.

       output:
                real    0m10.874s
                user    0m1.528s
                sys     0m9.272s

       analysis:
            By comparing the "time" outputs, we can clearly see that the tr2b
            program is faster than tr2u, no matter which time measure (real,
            CPU, or system) we reference. This is a reflection of the high
            overhead costs of the additional system calls that the tr2u
            program invokes.

   (B) when copying a file to the terminal:

       time ./tr2b "abc" "def" <largeFile.txt
                                             --> same effect as last "time"
                                                 command.

       output:
              real      0m2.431s
              user      0m0.277s
              sys       0m0.048s

       time ./tr2u "abc" "def" <largeFile.txt
                                            --> same effect as last "time"
                                                command

       output:
              real      0m10.340s
              user      0m1.400s
              sys       0m8.929s

       Analysis:
            As in part (A), by comparing the "time" outputs, we see that the
            tr2b program is faster than tr2u in measurements of real,
            CPU, and system time. Again, this is a reflection of the high
            overhead costs of the additional system calls that the tr2u
            program invokes.


---------------
END OF LAB.TXT
---------------

-----------------------------
START OF PERFORMANCE ANALYSIS
-----------------------------

DIRECTIONS FROM SPEC:
	Call the rewritten program sfrobu. Measure any differences in
	performance between sfrob and sfrobu using the time command.
	Run your program on inputs of varying numbers of input lines
	(say zero, 100, 10,000, and a million lines), and estimate the
	CPU time cost as a function of the number of input lines.

1. compile sfrob and sfrobu

   gcc -std=c99 -o sfrobu sfrobu.c      --> compiles "sfrobu"
   gcc -std=c99 -o sfrob -g sfrob.c     --> compiles "sfrob"


2. write a script to create a file with varying numbers of input lines:

   This is my script, called "largeFileGenerator2.py":

   #START OF SCRIPT

   import random
   import string

   if __name__=="__main__":

       char_options = string.ascii_letters + string.punctuation + string.digits

       num_output_lines = 100;

       for i in range(num_output_lines):
	   return_string = ''
	   for i in range(50):
	       return_string += random.choice(char_options)
	       return_string += ' '

	   print(return_string)

   #END OF SCRIPT


3. call the script with "num_output_lines" set to "0", "100", "10000",
   "1000000", and "2000000":

   python3 largeFileGenerator2.py >test1000   --> creates a file with
   	   			  	      	  1000 lines of randomly-
						  generated chars, where
						  each line ends with
						  a space character

   (NOTE: the command above was repeated with "num_output_lines" set to
   each of the aforementioned sizes, thus generating the files "test0",
   "test100", "test10,000", "test1,000,000", and "test2,000,000".)


4. input each file to "sfrob" and "sfrobu", and use the "time" command to
   measure their performances:

       time ./sfrob <test0
       	    --> output:
	    real	0m0.004s
	    user	0m0.001s
	    sys		0m0.002s

      time ./sfrobu <test0
      	   --> output:
	    real	0m0.009s
	    user	0m0.007s
	    sys		0m0.002s

      time ./sfrob <test100
      	   --> output:
	    real	0m0.009s
	    user	0m0.007s
	    sys		0m0.002s

      time ./sfrobu <test100
      	   --> output:
	   real		0m0.008s
	   user		0m0.005s
	   sys		0m0.003s

      time ./sfrob <test10,000
      	   --> output:
	    real	0m0.687s
	    user	0m0.602s
	    sys		0m0.076s

      time ./sfrobu <test10,000
	    real	0m0.774s
	    user	0m0.698s
	    sys		0m0.060s

      time ./sfrob <test1,000,000
      	   --> output:
	    real	1m7.715s
	    user	0m58.642s
	    sys		0m6.569s

      time ./sfrobu <test1,000,000
      	   --> output:
	   real		1m21.427s
	   user		0m58.462s
	   sys		0m9.380s

      time ./sfrob <test2,000,000
      	   --> output:
	    real	2m21.047s
	    user	2m3.948s
	    sys		0m12.580s

      time ./sfrobu <test2,000,000
      	   --> output:
	    real	3m28.024s
	    user	2m3.368s
	    sys		0m29.481s

      
      ANALYSIS - Estimate CPU time cost as a function of number of
      	       	 input lines:

          To find the CPU time cost for each command above, we add the
	  "user" time (ie the total number of CPU-seconds that the
	  process spent in kernel mode) to the "sys" time (ie total
	  number of CPU-seconds that the process spent in user mode)
	  for each trial. This sum gives us the total CPU time cost
	  in seconds.

	  We can then use Microsoft Excel to graph the CPU time cost
	  as a function of the number of input lines (ie we generate a
	  graph with the number of input lines on the x-axis and the
	  CPU time cost on the y-axis).

	  After generating these graphs, we use Microsoft Excel to
	  create the following models of CPU time cost as a function
	  of number of input lines:

	     for sfrob:
	     	 y = (7E-5)x - 0.381
	     for sfrobu:
	     	 y = (8E-5)x - 1.0705

	  From observing the data in each trial, it is apparent that
	  sfrobu becomes increasingly slow compared to sfrob as the
	  number of input lines increases (though their speeds are quite
	  similar for low numbers of input lines). This is reflected
	  in the larger slope for the sfrobu function, which indicates
	  that the CPU time efficiency is greater for sfrob compared to
	  sfrobu.

	  The most likely reason for this difference is that, although
	  sfrobu buffers the input manually while reading from stdin
	  and writing to stdout, getchar and putchar are likely
	  implemented in such ways that their buffering strategies
	  are more efficient than the methods employed in sfrobu.
	  The reason that the difference in efficiency is not extremely
	  pronounced (especially for small numbers of input lines)
	  is that sfrobu is fairly efficient at allocating buffers for
	  files of known size, thus minimizing the need to reallocate
	  multiple times (sfrobu only reallocates unnecessarily once
	  for every file of known size). One last reason why the
	  difference in efficiency is not extremely significant is that
	  sfrobu only performs one "write" invocation, thus limiting
	  the detriment of this costly operation.


-----------------------------
END OF PERFORMANCE ANALYSIS
-----------------------------

------------------------------------
START OF MEMORY ALLOCATION QUESTIONS
------------------------------------

SPEC INSTRUCTIONS:
     Which system calls would the program use, and what would the calls'
     arguments look like? Use strace on your sfrobu runs on inputs of
     varying size, to deduce what system calls sfrobu uses to allocate
     memory (or to reallocate memory if the input file grows while sfrobu
     is running).

     to discover what system calls sfrobu invokes, I used these commands:

     	strace -C ./sfrobu <test0
			--> runs sfrobu on an empty file.
			--> from this analysis, I found multiple calls
			    to "brk", "mmap", and "mprotect". These
			    are likely system calls used for the
			    purpose of memory allocation.

	sstrace -C ./sfrobu <test100
		   	--> runs sfrobu on a file with 100 lines
			--> reaffirms my observations from the prior
			    command, since sfrobu calls "brk" 10 times,
			    "mmap" 8 times, and "mprotect" 4 times.
			    It is also possible that "munmap" is
			    involved in memory allocation, since it is
			    called 2 times.

	strace -C python3 grow-test.py | ./sfrobu
	       	  	--> runs sfrobu with growing input
			--> again, reaffirms my observations from
			    the last 2 system calls.

	Therefore, in replacement of "malloc", "realloc", and "free",
	the program would instead use the system calls "brk", "mmmap",
	"mprotect", and possibly "munmap".
	
	Through some additional research, I found that the "brk" function
	changes the location of the program break (ie the end of the
	process's data segment), thus giving the effect of allocating
	memory to the process if the program break is increased and
	deallocating memory if the program break is decreased. From
	the "strace" commands, we can see that it takes one argument,
	which is a pointer to some address in memory that we wish to
	allocate or deallocate memory from.

	The "mmap" and "munmap" system calls create a mapping in
	the virtual address space of the calling process, and they
	return that address (as can be seen when "strace" is called).
	Some arguments of mmap are an address (the starting address for
	the new mapping), a length that dictates the size of the mapping,
	an int specifying the types of protections for the memory, int
	flags, a file descriptor, and an int offset.

	Lastly, the "mprotect" system call changes access protections
	for the calling process's memory, which is specified by the
	the range between the "address" argument and the "length"
	argument (which is an offset from the address). The last
	argument specifies what types of accesses are legal for
	the memory being referenced. This is likely called by "free"
	when "free" deallocates memory and makes it inaccessible.

	(NOTE: citation for my research about these system calls:
	       http://man7.org/linux/man-pages/man2 )

----------------------------------
END OF MEMORY ALLOCATION QUESTIONS
----------------------------------
