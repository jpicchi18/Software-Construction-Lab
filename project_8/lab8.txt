Name: Joseph Picchi

CS35L Assignment 8

=========
lab8.txt
=========

1. Lab step 1:

   git clone https://git.savannah.gnu.org/git/diffutils.git
					--> obtains a copy of the Diffutils repository,
					    in git format, from its main Savannah
					    repository, and places this copy in the
					    directory "diffutils"


2. Lab step 2:

   cd diffutils				--> navigate to the Diffutils repository
   git log >../git-log.txt		--> place a log of changes to Diffutil's
       	   				    master branch in the file "git-log.txt"

3. Lab step 3:

   git tag >../git-tags.txt		--> lists all of the stored tags in the
       	   				    diffutils repository, and stores the list
					    in the file "git-tags.txt"


4. Lab step 4:

   git log >../log.txt			--> generate a log of changes to diffutils'
       	   				    master branch, placing it in "log.txt"

   emacs ../log.txt
   C-s m a i n t : SPC q u o		--> search the log for the commit entitled
       	       	       	   		    "maint: quote 'like this' or "like this",
					    not `like this'"

   NOTE: from the prior commands, I found the following commit, which is the one
   we desired to find:
   
	commit 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f
	Author: Paul Eggert <eggert@cs.ucla.edu>
	Date:   Wed Jan 25 23:46:16 2012 -0800

	    maint: quote 'like this' or "like this", not `like this'

	    This is in response to a recent change in the GNU coding standards,
	    which now suggest quoting 'like this' or "like this", instead of
	    `like this' or ``like this''.
	    	  (NOTE: ommitted the rest of the commit text for brevity)

   man git format-patch  	      	--> access the man page to find relevant options
       	   				    for "git format-patch"

   git format-patch -1 --stdout 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f \
   >../quote-patch.txt
					--> generate a patch for the desired commit
					    by specifying the commit's hash number.
					    "-1" means that we only want a patch for
					    the commit specified by the hash number.
					    "--stdout" means that we want to write the
					    contents of the patch to stdout, which we
					    can then redirect to "../quote-patch.txt"


5. Lab step 5:

   git checkout v3.0			--> checks out version 3.0 from the diffutils
       					    repository by pointing HEAD to version 3.0,
					    thus creatnig a detatched HEAD state


6. Lab step 6:

   patch -p1 <../quote-patch.txt	--> applies "quote-patch.txt" to version 3.0,
   	     				    strippin 1 slash from the filenames
					    specified in the patch

   NOTE: a few problems were encountered while applying the patch:
	 1. The patch command could not figure out which file to patch in the
	    following cases:

		can't find file to patch at input line 62
		Perhaps you used the wrong -p or --strip option?

		can't find file to patch at input line 249
		Perhaps you used the wrong -p or --strip option?

		can't find file to patch at input line 262
		Perhaps you used the wrong -p or --strip option?

	  2. The hunks failed in the following cases:

		patching file README
		Hunk #1 FAILED at 9.
		Hunk #3 FAILED at 60.
		2 out of 3 hunks FAILED -- saving rejects to file README.rej
		patching file README-hacking
		Hunk #1 FAILED at 19.
		1 out of 1 hunk FAILED -- saving rejects to file README-hacking.rej

		patching file cfg.mk
		Hunk #1 FAILED at 29.
		1 out of 1 hunk FAILED -- saving rejects to file cfg.mk.rej

		Hunk #10 FAILED at 876.
		Hunk #11 FAILED at 906.
		Hunk #12 FAILED at 942.
		3 out of 14 hunks FAILED -- saving rejects to file src/diff.c.rej

		Hunk #6 FAILED at 433.
		1 out of 9 hunks FAILED -- saving rejects to file src/diff3.c.rej


7. Lab step 7:

   git status				--> provides an overview of files that
       					    were modified by the patch

	--> output:

	  HEAD detached at v3.0
	  Changes not staged for commit:
	    (use "git add <file>..." to update what will be committed)
	    (use "git restore <file>..." to discard changes in working directory)
		  modified:   NEWS
		  modified:   README
		  modified:   TODO
		  modified:   doc/diagmeet.note
		  modified:   ms/config.bat
		  modified:   ms/config.site
		  modified:   po/en.po
		  modified:   src/analyze.c
		  modified:   src/cmp.c
		  modified:   src/context.c
		  modified:   src/diff.c
		  modified:   src/diff.h
		  modified:   src/diff3.c
		  modified:   src/dir.c
		  modified:   src/ifdef.c
		  modified:   src/io.c
		  modified:   src/sdiff.c
		  modified:   src/side.c
		  modified:   src/system.h
		  modified:   src/util.c
		  modified:   tests/help-version

	  Untracked files:
	    (use "git add <file>..." to include in what will be committed)
		  NEWS.orig
		  README-hacking.orig
		  README-hacking.rej
		  README.orig
		  README.rej
		  cfg.mk.orig
		  cfg.mk.rej
		  ms/config.site.orig
		  src/cmp.c.orig
		  src/context.c.orig
		  src/diff.c.orig
		  src/diff.c.rej
		  src/diff.h.orig
		  src/diff3.c.orig
		  src/diff3.c.rej
		  src/dir.c.orig
		  src/sdiff.c.orig
		  src/system.h.orig
		  src/util.c.orig
		  tests/help-version.orig

	  no changes added to commit (use "git add" and/or "git commit -a")


   NOTE:
	The "git status" command shows that we modified the contents of the files
	that are preceded by the "modified:" specifier in the output. This modification
	is relative to the snapshots of the files in the "version 3.0" commit.
	The command also shows that we added the files specified in the "Untracked
	files" section when we applied the patch.


8. Lab step 8:

   To learn how to use "vc-diff", "vc-revert", "describe-mode", "diff-apply-hunk",
   and "diff-goto-source" functions, I used the following commands:
   
   cd diffutils
   emacs README
   C-x v =				--> runs the "vc-diff" function, comparing the
       	 				    version of "README" in the working set to
					    the version before the patch was applied.
					    
   C-x v u				--> displays the diff file generated from
       	 				    the "vc-diff" function, along with a prompt
					    asking "Discard changes in 1 file? (yes
					    or no)".
					    This function allows me to revert the file
					    in the current working set to its last
					    revision state.

   C-h m				--> generates a buffer stating that I am in
       					    "diff-mode.el".
					    The buffer also contains a list of
					    functions available in this mode.

   NOTE:
	I also discovered from the documentation linked in the assignment page that:
	  1. "diff-apply-hunk" --> applies a given hunk to its target, or applies the
	     		       	   reverse of the hunk if preceded by "C-u"
	  2. "diff-goto-source" --> navigates to the file and line corresponding to a
	     			    given hunk



9. Lab step 9:

   (part A) Use Emacs to revert all the changes to files other than .c files,
   	    since you want only changes to .c files

	    git status	   		   --> lists all of the files that have been
	    				       modified since the last commit.
			--> From this, we discover that the files for which we wish
			    to revert changes are:
				modified:   NEWS
				modified:   README
				modified:   TODO
				modified:   doc/diagmeet.note
				modified:   ms/config.bat
				modified:   ms/config.site
				modified:   po/en.po
				modified:   src/diff.h
				modified:   src/system.h
				modified:   tests/help-version

	     For each of the files listed below, we run the following commands to
	     revert all changes:
	     	    emacs [filename]
	     	    C-x v u		--> open the prompt to revert changes
		    y e s 		--> confirm the command to revert changes
		    C-x C-c		--> exit the file

	     git status 		    --> check to make sure that the only files
	     	 			    	listed in the "changes not staged
						for commit" section are ".c" files


   (part B) undo all the changes to .c files other than changes to character string
   	    constants

	    git status			--> check which ".c" files have changes that
	    				    might need to be undone
					--> we need to check all ".c" files listed in
					    the "changes not staged for commit"
					    section, which are:
					    	     modified:   src/analyze.c
						     modified:   src/cmp.c
						     modified:   src/context.c
						     modified:   src/diff.c
						     modified:   src/diff3.c
						     modified:   src/dir.c
						     modified:   src/ifdef.c
						     modified:   src/io.c
						     modified:   src/sdiff.c
						     modified:   src/side.c
						     modified:   src/util.c


	    for each file, I ran these commands:
	    
	    	emacs [filename]
		C-x v =			--> open the *vc-diff*  buffer
		C-c C-c			--> (if necessary) jumps to the line in the new
		    			    ".c" file corresponding to the hunk
		C-u C-c C-a		--> (if the hunk does not change a character
		    			    string constant) undo the hunk
		C-x C-c y Enter		--> exit the file


10. Lab step 10:

    emacs src/*.c.rej			--> open all files of the form "src/*.rej",
    	  				    where "*" is a wildcard
					--> opens the files:
					    	  src/diff.c.rej
						  src/diff3.c.rej

    NOTE:
	When I use "diff-apply-hunk" or "diff-goto-source" in either of the
    	two "src/*.c.rej" files above, the buffer outputs the error "Hunk text not
    	found".
	Therefore, to apply the rejected changes in "src/diff.c" and "src/diff3.c",
	I used the following commands:

	       emacs [filename]			--> open "src/diff.c" and "src/diff3.c"
	       M-% ` Enter ' Enter		--> query replace "`" character with
	       	     	     			    "'" character
	       y				--> execute the replace if the occurance
	       					    of "`" appears in a character
						    string constant
	       n				--> do not execute the replace otherwise
	       C-x C-s				--> save the file
	       C-x C-c				--> exit the file


11. Lab step 11:

    git clean -f			--> removes all untracked files from the
    	      				    working tree
					--> "-f" is required because the git
					    configuration variable clean.requireForce
					    is set to true


12. Lab step 12:

    git status				--> reports a half-dozen files, which are the
    					    following:
						modified:   src/cmp.c
						modified:   src/diff.c
						modified:   src/diff3.c
						modified:   src/dir.c
						modified:   src/sdiff.c
						modified:   src/util.c

     git diff >../quote-3.0-patch.txt
					--> generates a patch comparing the files in
     	      				    my local tree to the files in the
					    "version 3.0" commit, and places the patch
					    in the file "../quote-3.0-patch.txt"

     cat ../quote-3.0-patch.txt | wc -l
     	 			        --> outputs the number of lines in the patch
					    we just created
					--> output: 326
					--> we have thus verified that the patch is
					    300-400 lines long, as desired


13. Lab step 13:

    emacs README-hacking		--> view the directions for building the
    	  				    resulting modified version of diffutils
					    
    ./boostrap				--> extracts the other files needed to build

    wget https://web.cs.ucla.edu/classes/spring20/cs35L/assign/diffutils-gets.diff
					--> obtains the "additional patch" described on
					    the assignment webpage, and saves it as the
					    file "diffutils-gets.diff"

    patch -p0 <diffutils-gets.diff	--> applies the "additional patch" described on
    	      				    the assignment webpage

    ./configure
    make
    make check				--> builds the modified version of diffutils
    	 				    using the commands described in
					    "README-hacking"
					    
    ./src/diff . -			--> verifies that diffutils does the right thing
    	       	 			    by using a "'" character in replacement of
					    its previous use of a "`" character
			--> output:
			    "./src/diff: cannot compare '-' to a directory

    ./src/diff --help | grep \`
					--> verifies that diffutils does the right thing
    	       				    by removing all previous occurances of the
					    "`" character
					--> the command outputs nothing

    ./src/diff --help			--> verifies that diffutils does the right thing
    	       				    by replacing previous occurances of the "`"
					    character with the "'" character



14. Lab step 14:

    git clone https://git.savannah.gnu.org/git/diffutils.git diffutils_unmodified
					--> clone the unmodified diffutils repository
					    into the directory "diffutils_unmodified"

    cd diffutils_unmodified
    git checkout v3.0
					--> switch to diffutils version 3.0

    cd ..
    mkdir diffutils-3.0
    cp diffutils_unmodified/src/*.c diffutils-3.0/
					--> copy the source code of diffutils 3.0 into
					    the directory "diffutils-3.0"

    mkdir diffutils-3.0-patch
    cp diffutils/src/*.c diffutils-3.0-patch
					--> copy the source code of the modified version
					    of diffutils into the directory
					    "diffutils-3.0-patch"

    diffutils/src/diff -pru diffutils-3.0 diffutils-3.0-patch >quote-3.0-test.txt
    		       	    		--> use the just-built "diff" command to compare
					    the source code in the directory
					    "diffutils-3.0" to the source code in the
					    directory "diffutils-3.0-patch"


15. Lab step 15:

    diff quote-3.0-test.txt quote-3.0-patch.txt
					--> use "diff" to compare the contents of
					    "quote-3.0-test.txt" and
					    "quote-3.0-patch.txt"

    NOTE:
	The files are not identical because "diff" writes non-empty output to
	stdout.
	The differences are innocuous because, from examining the output of the
	"diff" command, we see that almost all of the differences are manifested in
	inconsequential differences like file paths or the methods by which function
	definitions are displayed in the diff files themselves.
    
